- Class: meta  Course: BA Digital Methods 2  Lesson: Class 1  Author: Tobias Blanke  Type: Standard  Organization: King's College London  Version: 2.4.2- Class: text  Output: Welcome to your first session on how to use R. We will have several more sessions like this. Afterwards, you will have a better understanding of processing cultural and social datasets with R.- Class: cmd_question  Output: Let's try to add two numbers. Please, type 4 + 3 into the command prompt. Then, press enter.  CorrectAnswer: 4 + 3  AnswerTests: omnitest(correctVal=7)  Hint: Just type 4 + 3 and press enter.- Class: cmd_question  Output: Now, let's try 12 – 5.  CorrectAnswer: 12 - 5  AnswerTests: omnitest(correctExpr='12 - 5', correctVal=7)  Hint: Just type in 12 - 5.- Class: cmd_question  Output: And, finally, brackets can be used to indicate that operators in the sub-expression take precedence. Try (5 * 3) – 4.  CorrectAnswer:  (5 * 3) - 4  AnswerTests: omnitest(correctExpr='(5*3)-4', correctVal=11)  Hint: Just type in the exact expression.- Class: text  Output: These were all numbers. All this is very similar to what you know from calculators. But computers can process many other symbols as well. Other important symbols include 'strings', which you know as words. These can be any number of characters like a, b, c, etc. but also -, 1 or & count as characters.  - Class: cmd_question  Output:  Let's try this. Please, type 'Hello World' into the command prompt. The quotation marks '' indicate that this is a String. You could also use "Hello World" btw.   CorrectAnswer: 'Hello World'  AnswerTests: omnitest(correctVal='Hello World')  Hint: Just enter 'Hello World'.- Class: cmd_question  Output: Let's repeat. Please, type 'From KCL Digital Humanities'.  CorrectAnswer: 'From KCL Digital Humanities'  AnswerTests: omnitest(correctVal='From KCL Digital Humanities')  Hint: Just enter 'From KCL Digital Humanities'.  - Class: cmd_question  Output: What do you see when you type typeof('string')?  CorrectAnswer: typeof('string')  AnswerTests: omnitest(correctExpr='typeof(\'string\')')  Hint: Just type typeof('string').  - Class: cmd_question  Output: There are many more types, which we will cover throughout the course. Booleans are another important one. They evaluate whether a statement is TRUE or FALSE. Please, type 4 < 5.  CorrectAnswer: 4 < 5  AnswerTests: omnitest(correctExpr='4 < 5')  Hint: Just type 4 < 5.- Class: text  Output: Another important concept that discriminates programming languages from calculators are variables. They are basically names for places in the computer's memory where we can store things. We create variables with the R assignment operator <-. You can also use = in R. - Class: cmd_question  Output: Let's try that and assign the value 5 to the variable my_apples. Please, type  my_apples <- 5.   CorrectAnswer: my_apples <- 5  AnswerTests: omnitest(correctExpr='my_apples <- 5')  Hint: Don't be shy. Just type my_apples <- 5.- Class: cmd_question  Output: Well done. Now print out my_apples. Just type my_apples into the command prompt.   CorrectAnswer: my_apples   AnswerTests: omnitest(correctExpr='my_apples')  Hint: Just type my_apples.  - Class: cmd_question  Output: Now let's try to assign two variables. First type my_apples <- 5  CorrectAnswer: my_apples <- 5   AnswerTests: omnitest(correctExpr='my_apples <- 5')  Hint: Just type my_apples <- 5.- Class: cmd_question  Output: Now type my_oranges <- 6. You have now created two variables my_apples and my_oranges.  CorrectAnswer: my_oranges <- 6   AnswerTests: omnitest(correctExpr='my_oranges <- 6')  Hint: Just type my_oranges <- 6.  - Class: cmd_question  Output: Just like numbers we can add two numerical variables. Please try it with my_apples + my_oranges.  CorrectAnswer: my_apples + my_oranges  AnswerTests: omnitest(correctExpr='my_apples + my_oranges')  Hint: Just type my_apples + my_oranges.  - Class: cmd_question  Output: We can also assign the result to a new variable my_fruit. Please type my_fruit <- my_apples + my_oranges.  CorrectAnswer: my_fruit <- my_apples + my_oranges  AnswerTests: omnitest(correctExpr='my_fruit <- my_apples + my_oranges')  Hint: Just type my_fruit <- my_apples + my_oranges.- Class: cmd_question  Output: To check that the new variable exists, please enter my_fruit.  CorrectAnswer: my_fruit  AnswerTests: omnitest(correctExpr='my_fruit')  Hint: Just enter my_fruit.- Class: cmd_question  Output: But we can only combine variables of the same type. Please assign the string 'six' to my_oranges with my_oranges <- 'six'.  CorrectAnswer: my_oranges <- 'six'  AnswerTests: omnitest(correctExpr='my_oranges <- \'six\'')  Hint: Just type my_oranges <- 'six'.- Class: cmd_question  Output: Now let's try and 'add' my_apples and my_oranges. Type my_apples + my_oranges and you will get an error. Afterwards, type skip() to move to the next question.  CorrectAnswer: NA  AnswerTests: omnitest(correctVal=NA)  Hint: Just type my_apples + my_oranges and then skip().- Class: text  Output: Variables are very important in any programming language. Another key idea is the function. It is basically a predefined set of commands, which you give your own name. On your calculator you can, for instance, use the inv function to get the inverse of a number. R also has a lot of pre-defined functions like inv. But in any programming language you can also define your own functions. We will come back to this later. - Class: cmd_question  Output: In R functions are called with arguments in brackets. Please type in sqrt(9) to get the square root of 9. sqrt is the function name and 9 is the only argument. BTW, when you typed swirl() to start SWIRL you have called the swirl function. This function has no arguments and thus only empty brackets.  CorrectAnswer: sqrt(9)  AnswerTests: omnitest(correctExpr='sqrt(9)', correctVal=3)  Hint: Just run sqrt(9).- Class: cmd_question  Output: A function can also have more than one argument. In order to sum 1,3 and 5, type in sum(1, 3, 5). We have now called sum with three arguments.  CorrectAnswer: sum(1, 3, 5)  AnswerTests: omnitest(correctExpr='sum(1, 3, 5)', correctVal=9)  Hint: Just type sum(1, 3, 5).- Class: cmd_question  Output: Some functions have arguments with different types. For instance, try rep('Hello World!', times = 3) to print out Hello World three times. The first argument is a string and the second a number.  CorrectAnswer: rep('Hello World!', times = 3)  AnswerTests: omnitest(correctExpr='rep(\'Hello World!\', times = 3)')  Hint: Just type rep('Hello World!', times = 3).- Class: text  Output: This was a lot of stuff for the first lesson. Unfortunately, this is necessary but once you have learned one programming language all of this becomes quite obvious and repetitive. Before we finish we need to learn one more important concept that is specific to R. With so-called vectors, you can collect several elements in the same variable. This is immensely useful as we see later.  - Class: cmd_question  Output: Let's try vectors, which store an ordered set of values called elements. A vector can contain any number of elements using the combine function c(_,_,_). Type in numeric_vector <- c(1, 10, 49) to create a numeric vector of three numbers and then print it out. Please, be aware that vectors can only contain elements of the same type. In this case numbers.  CorrectAnswer: numeric_vector <- c(1, 10, 49)  AnswerTests: omnitest(correctExpr='numeric_vector <- c(1, 10, 49)')  Hint: Just type numeric_vector <- c(1, 10, 49).  - Class: cmd_question  Output: To check that the new vector exists, please type numeric_vector.  CorrectAnswer: numeric_vector  AnswerTests: omnitest(correctExpr='numeric_vector')  Hint: Just type numeric_vector.  - Class: cmd_question  Output: We can also create string/characters vectors, with character_vector <- c('abc', 'def', 'ghi').  CorrectAnswer: character_vector <- c('abc', 'def', 'ghi')  AnswerTests: omnitest(correctExpr='character_vector <- c(\'abc\', \'def\', \'ghi\')')  Hint: Just type character_vector <- c('abc', 'def', 'ghi').  - Class: cmd_question  Output: To check that the new vector exists, please type character_vector.  CorrectAnswer: character_vector  AnswerTests: omnitest(correctExpr='character_vector')  Hint: Just type character_vector.      	- Class: cmd_question  Output: As said, vectors can only contain one type. Try c(1,2,'abc') and you can see how elements are forced into the same type.  CorrectAnswer: c(1,2,'abc')  AnswerTests: omnitest(correctExpr='c(1,2,\'abc\')')  Hint: Just type c(1,2,'abc').- Class: cmd_question  Output: Vectors are useful to, for instance, hold your poker winnings during the week. Thank you dataquest.com for this example! An excellent resource to learn R btw, but unfortunately you have to pay for it. You do not play on Saturday and Sunday, but record all the other 5 days, by entering poker_vector <- c(140, -50, 20, -120, 240).  CorrectAnswer: poker_vector <- c(140, -50, 20, -120, 240)  AnswerTests: omnitest(correctExpr='poker_vector <- c(140, -50, 20, -120, 240)')  Hint: Just enter poker_vector <- c(140, -50, 20, -120, 240).    	- Class: cmd_question  Output: You feel this is your lucky week. So, you play roulette, too. Please record your winnings with roulette_vector <- c(-24, -50, 100, -350, 10).  CorrectAnswer: roulette_vector <- c(-24, -50, 100, -350, 10)  AnswerTests: omnitest(correctExpr='roulette_vector <- c(-24, -50, 100, -350, 10)')  Hint: Just type roulette_vector <- c(-24, -50, 100, -350, 10).      	- Class: cmd_question  Output: Because you like it organised, you would now like to name each of the entries. This is possible in R with another function called names. Please type in names(poker_vector) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday").   CorrectAnswer: names(poker_vector) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")   AnswerTests: omnitest(correctExpr='names(poker_vector) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")')  Hint: Just type names(poker_vector) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")  - Class: cmd_question  Output: And the same for the roulette winnings. Run names(roulette_vector) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday").  CorrectAnswer: names(roulette_vector) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")  AnswerTests: omnitest(correctExpr='names(roulette_vector) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")')  Hint: Just type names(roulette_vector) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday").  - Class: cmd_question  Output: And now for real magic. Just like numbers, you can add also numbers to vectors. In order to perform an element-wise vector addition, please try total_vector <- poker_vector + roulette_vector.  CorrectAnswer: total_vector <- poker_vector + roulette_vector  AnswerTests: omnitest(correctExpr='total_vector <- poker_vector + roulette_vector')  Hint: Just type total_vector <- poker_vector + roulette_vector. - Class: cmd_question  Output: Have a look at the new vector with total_vector.  CorrectAnswer: total_vector  AnswerTests: omnitest(correctExpr='total_vector')  Hint: Just run total_vector. - Class: cmd_question  Output: total_vector shows your daily winnings. Well, done. You can also add, subtract, multiply or divide any number from your vector. Try total_vector + 100.  CorrectAnswer: total_vector + 100  AnswerTests: omnitest(correctExpr='total_vector + 100')  Hint: Just type total_vector + 100. - Class: cmd_question  Output: Now try total_vector / 100.  CorrectAnswer: total_vector / 100  AnswerTests: omnitest(correctExpr='total_vector / 100')  Hint: Just type total_vector / 100. - Class: cmd_question  Output: Next, you are interested in how much you win in poker and roulette per day. You can simply add up all the elements in the vectors get that. Remember that we can use built-in functions like sqrt? To add up elements in a vector we can use the function sum. Try it with sum(poker_vector).  CorrectAnswer: sum(poker_vector)  AnswerTests: omnitest(correctExpr='sum(poker_vector)')  Hint: Just type sum(poker_vector). - Class: cmd_question  Output: And of course sum(roulette_vector).  CorrectAnswer: sum(roulette_vector)  AnswerTests: omnitest(correctExpr='sum(roulette_vector)')  Hint: Just type sum(roulette_vector).- Class: cmd_question  Output: In order to get our total winnings per day for the week, we can simply add both vectors with the R sum function. This adds each element in the first vector to its corresponding element in the second. Try it with total_week <- sum(poker_vector + roulette_vector)  CorrectAnswer: total_week <- sum(poker_vector + roulette_vector)  AnswerTests: omnitest(correctExpr='total_week <- sum(poker_vector + roulette_vector)')  Hint: Just type total_week <- sum(poker_vector + roulette_vector).- Class: cmd_question  Output: Print out total_week.  CorrectAnswer: total_week  AnswerTests: omnitest(correctExpr='total_week')  Hint: Just type total_week.- Class: cmd_question  Output: We have almost covered everything there is to know about vectors. One more important concept is that vectors are indexed. Using square brackets, we can select the first, second and third element directly with 1, 2, 3, etc. respectively. To select Monday's poker winning simply use square brackets [] and type poker_monday <- poker_vector[1].  CorrectAnswer: poker_monday <- poker_vector[1]  AnswerTests: omnitest(correctExpr='poker_monday <- poker_vector[1]')  Hint: Type in poker_monday <- poker_vector[1].- Class: cmd_question  Output: Print out poker_monday.  CorrectAnswer: poker_monday   AnswerTests: omnitest(correctExpr='poker_monday')  Hint: Type in poker_monday. - Class: cmd_question  Output: You can also select more than one element with the colon operator. In order to select your winnings from Tuesday to Friday, please run roulette_selection_vector <- roulette_vector[2:5].  CorrectAnswer: roulette_selection_vector <- roulette_vector[2:5]  AnswerTests: omnitest(correctExpr='roulette_selection_vector <- roulette_vector[2:5]')  Hint: Type in roulette_selection_vector <- roulette_vector[2:5].  - Class: cmd_question  Output: To find out about our roulette winnings from Tuesday to Friday, we can use sum again. Try sum(roulette_selection_vector).  CorrectAnswer: sum(roulette_selection_vector)  AnswerTests: omnitest(correctExpr='sum(roulette_selection_vector)')  Hint: Type in sum(roulette_selection_vector).- Class: cmd_question  Output: Using the square brackets we can also update elements of a vector. Let's remove your Wednesday's winnings and set the corresponding value to 0 with total_vector[3] <- 0.  CorrectAnswer: total_vector[3] <- 0  AnswerTests: omnitest(correctExpr='total_vector[3] <- 0')  Hint: Run total_vector[3] <- 0.- Class: cmd_question  Output: Print out total_vector.  CorrectAnswer: total_vector   AnswerTests: omnitest(correctExpr='total_vector')  Hint: Type in total_vector.- Class: cmd_question  Output: Let's also add 1000 to the Wednesday winnings of roulette_selection_vector with roulette_selection_vector[2] <- 1000.  CorrectAnswer: roulette_selection_vector[2] <- 1000  AnswerTests: omnitest(correctExpr='roulette_selection_vector[2] <- 1000')  Hint: Type in roulette_selection_vector[2] <- 1000.- Class: cmd_question  Output: Print out roulette_selection_vector.  CorrectAnswer: roulette_selection_vector   AnswerTests: omnitest(correctExpr='roulette_selection_vector')  Hint: Type in roulette_selection_vector.   - Class: cmd_question  Output: Vectors can also represent functions. Type in first x <- seq(1, 20, 0.1). Ask your friend the Internet what seq does!   CorrectAnswer: x <- seq(1, 20, 0.1)  AnswerTests: omnitest(correctExpr='x <- seq(1, 20, 0.1)')  Hint: Type in x <- seq(1, 20, 0.1).- Class: cmd_question  Output: Print out x.  CorrectAnswer: x   AnswerTests: omnitest(correctExpr='x')  Hint: Type in x. - Class: cmd_question  Output: Type in first y <- sin(x). Ask your friend the Internet what sin does!  CorrectAnswer: y <- sin(x)  AnswerTests: omnitest(correctExpr='y <- sin(x)')  Hint: Type in y <- sin(x).- Class: cmd_question  Output: Print out y.  CorrectAnswer: y  AnswerTests: omnitest(correctExpr='y')  Hint: Type in y.- Class: cmd_question  Output: One of the major strengths of R is its graphing ability, which we will cover in much more detail later. Please plot the sin function with plot(x,y).   CorrectAnswer: plot(x,y)  AnswerTests: omnitest(correctExpr='plot(x,y)')  Hint: Type in plot(x,y).- Class: text  Output: The final new concept for today is the matrix. It has little to do with the movie but is simply a two-dimensional vector. Up to now we only had one dimension, but why not add one more? BTW, we get so-called arrays once we move to more than 2 dimensions but that really goes too far right now.  - Class: cmd_question  Output: Let's try this and move on from your gambling. We will now introduce an example from social analytics brought to us by dataquest.com, which we will come back to again later in the course. You have a LinkedIn account and a Facebook account and want to find out which one has more views and is more successful. You collected the views per day for a particular week in two vectors. Type in first linkedin <- c(16, 9, 13, 5, 2, 17, 14)  CorrectAnswer: linkedin <- c(16, 9, 13, 5, 2, 17, 14)  AnswerTests: omnitest(correctExpr='linkedin <- c(16, 9, 13, 5, 2, 17, 14)')  Hint: Type in linkedin <- c(16, 9, 13, 5, 2, 17, 14).- Class: cmd_question  Output: And now create facebook <- c(17, 7, 5, 16, 8, 13, 14).  CorrectAnswer: facebook <- c(17, 7, 5, 16, 8, 13, 14)  AnswerTests: omnitest(correctExpr='facebook <- c(17, 7, 5, 16, 8, 13, 14)')  Hint: Type in facebook <- c(17, 7, 5, 16, 8, 13, 14).- Class: cmd_question  Output: Now, we want to create a single view over these two vectors. We use the matrix function to create a matrix with 2 rows; one for the LinkedIn views and one for the Facebook ones. Type in views <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE). Again if you are interested, why not search the web for the matrix command? But for the time being you can also do without further knowledge about how a matrix exactly works. Just try and remember that they exist.  CorrectAnswer: views <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE)  AnswerTests: omnitest(correctExpr='views <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE)')  Hint: Just type in views <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE).  - Class: cmd_question  Output: Print out views.  CorrectAnswer: views  AnswerTests: omnitest(correctExpr='views')  Hint: Type in views.  - Class: cmd_question  Output: We can then ask a couple of good questions against the matrix views without having to reference the vectors it is made of. To find out on which days we had 13 views for either LinkedIn or Facebook, we type views == 13. The == is the Boolean equivalence operator.   CorrectAnswer: views == 13  AnswerTests: omnitest(correctExpr='views==13')  Hint: Just type in views == 13.- Class: cmd_question  Output: When are views less than or equal to 14? Try views <= 14  CorrectAnswer: views <= 14.  AnswerTests: omnitest(correctExpr='views <= 14')  Hint: Just type in views <= 14. - Class: cmd_question  Output: How often does facebook equal or exceed linkedin times two? This is actually a quite advanced expression in R already. Try it with sum (facebook >= linkedin * 2). Take a moment to think about the components of this expression. Maybe, you want to take a piece of paper and a pen to write down all the components.  CorrectAnswer: sum(facebook >= linkedin * 2)  AnswerTests: omnitest(correctExpr='sum(facebook >= linkedin * 2)')  Hint: Just type in sum(facebook >= linkedin * 2).- Class: cmd_question  Output: Similar to vectors, we can access each element of a matrix, but this time we of course need 2 dimensions. views[1,2] will select the first row's second element. Try it.  CorrectAnswer: views[1,2]  AnswerTests: omnitest(correctExpr='views[1,2]')  Hint: Type in views[1,2].- Class: cmd_question  Output: Overall, the order is row first and then column. Try views[2,5].  CorrectAnswer: views[2,5]  AnswerTests: omnitest(correctExpr='views[2,5]')  Hint: Just type in views[2,5].  - Class: text  Output: That's it for this session. Well done. In the future, we will actually not use matrixes much. But next time, we will meet an even more advanced idea. A data frame is multi-dimensional like the matrix but can hold values of different types. It is the workhorse of R. Until then!